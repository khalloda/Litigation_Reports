import mysql from 'mysql2/promise';
import { config } from '../config.js';
export class MySQLManager {
    static instance;
    pool = null;
    constructor() { }
    static getInstance() {
        if (!MySQLManager.instance) {
            MySQLManager.instance = new MySQLManager();
        }
        return MySQLManager.instance;
    }
    async getConnection() {
        if (!this.pool) {
            this.pool = mysql.createPool({
                host: config.mysql.host,
                port: config.mysql.port,
                user: config.mysql.user,
                password: config.mysql.password,
                database: config.mysql.database,
                waitForConnections: true,
                connectionLimit: config.mysql.connectionLimit,
                queueLimit: 0,
                connectTimeout: config.mysql.connectTimeout,
                enableKeepAlive: true,
                keepAliveInitialDelay: 0,
            });
            // Test connection
            try {
                const connection = await this.pool.getConnection();
                await connection.ping();
                connection.release();
            }
            catch (error) {
                this.pool = null;
                throw new Error(`Failed to connect to MySQL: ${error}`);
            }
        }
        return this.pool;
    }
    async executeQuery(query, params = []) {
        const pool = await this.getConnection();
        try {
            const [results] = await pool.execute(query, params);
            return results;
        }
        catch (error) {
            throw new Error(`Query execution failed: ${error}`);
        }
    }
    async close() {
        if (this.pool) {
            await this.pool.end();
            this.pool = null;
        }
    }
}
export const mysqlManager = MySQLManager.getInstance();
